{"version":3,"sources":["components/InfoHeading.jsx","components/SearchBar.jsx","components/DonutChart.jsx","components/SpiderChart.jsx","components/ChartResults.jsx","components/PitchingTool.jsx","App.js","serviceWorker.js","index.js"],"names":["InfoHeading","props","react_default","a","createElement","metricOptions","value","label","SearchBar","_useState","useState","_useState2","Object","slicedToArray","players","setPlayers","useEffect","console","log","fetch","method","headers","Accept","Content-Type","then","result","json","data","map","cv","pitcherId","pitcherName","prepareData","splice","className","react_select_browser_esm","options","player","onChange","selectedOption","setPlayerId","setPlayerName","closeMenuOnSelect","isMulti","metricsObject","metrics","setMetrics","toConsumableArray","DonutChart","name","y","setData","chart","type","title","text","tooltip","pointFormat","plotOptions","pie","allowPointSelect","cursor","dataLabels","enabled","distance","format","showInLegend","series","innerSize","colorByPoint","pitchDist","Fragment","highcharts_react_min_default","highcharts","Highcharts","HighchartsMore","polar","pane","size","xAxis","categories","tickmarkPlacement","lineWidth","yAxis","gridLineInterpolation","min","max","labels","formatter","this","shared","pointPlacement","SpiderChart","ChartResults","setPitchDist","playerId","endpoint","concat","pitchDistArray","_i","_Object$keys","keys","length","pitchType","dist","Num","push","Number","catch","err","PitchingTool","playerName","_useState3","_useState4","_useState5","_useState6","playerObject","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0bb8b989.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function InfoHeading(props) {\n  const lastUpdate = \"January 01, 2019\";\n  return (\n    <div>\n      <h1>Pitching Tool</h1>\n      <h3>Last Updated: {lastUpdate}</h3>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\n\nimport Select from 'react-select';\n\n// import { players } from './tempData';\n\nconst metricOptions = [\n  { value: 'ACES', label: 'ACES' },\n  { value: 'Whiffs', label: 'Whiffs' },\n  { value: 'CSW%', label: 'CSW%' },\n  { value: 'GB+PU%', label: 'GB+PU%' }\n]\n\nexport default function SearchBar(props) {\n  const [players, setPlayers] = useState([]);\n\n  function handlePlayerChange(selectedOption) {\n    props.setPlayerId(selectedOption.value);\n    props.setPlayerName(selectedOption.label);\n  }\n\n  function handleMetricChange(selectedOption) {\n    const metrics = selectedOption.map(cv => cv.value);\n    props.setMetrics([...metrics]);\n  }\n\n  useEffect(() => {\n    console.log('getting players');\n    // const endpoint = 'http://localhost:5000/pitchers'\n    const endpoint = 'https://ks506u80el.execute-api.us-west-2.amazonaws.com/dev/pitchers';\n    let lookupOptions = {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }\n    fetch(endpoint, lookupOptions)\n      // .then(result => console.log(result))\n      .then(result => result.json())\n      .then(data => setPlayers(prepareData(data.splice(0, 100)))\n      );\n  }, []);\n\n  function prepareData(data) {\n    return data.map((cv) => {\n      return { value: cv.pitcherId, label: cv.pitcherName }\n    });\n  }\n\n  return (\n    <div className=\"searchbar-container\">\n      <Select\n        options={players}\n        value={props.player}\n        onChange={handlePlayerChange}\n      />\n      <Select\n        closeMenuOnSelect={false}\n        isMulti\n        // defaultValue={[...metricOptions]}\n        value={props.metricsObject}\n        options={metricOptions}\n        onChange={handleMetricChange}\n      />\n    </div>\n\n  );\n}","import React, { useState, useEffect } from 'react';\n\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\n// import { pitchData } from './tempData';\n\nexport default function DonutChart(props) {\n  const [data, setData] = useState([\n    {name: 'FA', y: 0.25},\n    {name: 'CU', y: 0.75}\n  ]);\n\n  let options = {\n    chart: {\n      type: 'pie'\n    },\n    title: {\n      text: 'Percentage of Pitches Thrown'\n    },\n    tooltip: {\n      pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n    },\n    plotOptions: {\n      pie: {\n        allowPointSelect: true,\n        cursor: 'pointer',\n        dataLabels: {\n          enabled: true,\n          distance: -30,\n          format: '<b>{point.name}</b>',\n        },\n        showInLegend: false,\n      }\n    },\n    series: [{\n      name: 'Pitch',\n      innerSize: '50%',\n      colorByPoint: true,\n      data: data\n    }]\n  }\n\n  useEffect(() => {\n    updateData(props.pitchDist);\n  }, [props.pitchDist]);\n\n  function updateData(data) {\n    setData(data);\n  }\n\n  return (\n    <>\n    <HighchartsReact\n      highcharts={Highcharts}\n      options={options}\n    />\n    </>\n  );\n}","import React from 'react';\n\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport HighchartsMore from 'highcharts/highcharts-more'\n\nHighchartsMore(Highcharts);\n\nconst options = {\n  chart: {\n    polar: true,\n    type: 'line'\n  },\n  title: {\n    text: 'Percentiles of Pitches',\n  },\n  pane: {\n    size: '80%'\n  },\n  xAxis: {\n    categories: ['Fourseam', 'Sinker', 'Cutter', 'Curve',\n      'Slider', 'Change'],\n    tickmarkPlacement: 'on',\n    lineWidth: 0\n  },\n  yAxis: {\n    gridLineInterpolation: 'polygon',\n    lineWidth: 0,\n    min: 0,\n    max: 100,\n    labels: {\n      formatter: function() {\n        return this.value + '%';\n      }\n    }\n  },\n  tooltip: {\n    shared: true,\n    pointFormat: '<span style=\"color:{series.color}\">{series.name}: <b>{point.y:,.0f}%</b><br/>'\n  },\n  series: [\n    {\n      name: 'ACES',\n      data: [54, 25, 21, 35, 17, 10],\n      pointPlacement: 'on'\n    },\n    {\n      name: 'Whiffs',\n      data: [50, 39, 42, 31, 26, 14],\n      pointPlacement: 'on'\n    },\n    {\n      name: 'CSW%',\n      data: [20, 19, 62, 71, 96, 19],\n      pointPlacement: 'on'\n    },\n    {\n      name: 'GB+PU%',\n      data: [22, 93, 33, 45, 78, 34],\n      pointPlacement: 'on'\n    }\n  ]\n};\n\nexport default function SpiderChart(props) {\n  return (\n    <HighchartsReact\n      highcharts={Highcharts}\n      options={options}\n    />\n  );\n}","import React, { useState, useEffect } from 'react';\n\nimport DonutChart from './DonutChart';\n// import DonutChart2 from './DonutChart2';\nimport SpiderChart from './SpiderChart';\n\nexport default function ChartResults(props) {\n  const [pitchDist, setPitchDist] = useState([]);\n\n  useEffect(() => {\n    console.log('chart results effect');\n    const playerId = props.playerId;\n    const endpoint = `https://ks506u80el.execute-api.us-west-2.amazonaws.com/dev/pitcher/${playerId}`;\n    let lookupOptions = {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    };\n    fetch(endpoint, lookupOptions)\n      .then(result => result.json())\n      .then(data => {\n        // console.log(data);\n        const pitchDistArray = [];\n        for (let pitchType of Object.keys(data)) {\n          if (pitchType !== 'pitcherId' \n            && pitchType !== 'pitcherName'\n            && pitchType !== 'ALL') {\n            // let dist = (data[pitchType].Num /  data['ALL'].Num);\n            let dist = data[pitchType].Num\n            let name;\n            if (dist === 0) {\n              name = \"\";\n            } else {\n              name = pitchType;\n            }\n            pitchDistArray.push({ name: name, y: Number(dist) });\n          }\n        }\n        // console.log(pitchDistArray);\n        setPitchDist(pitchDistArray);\n      })\n      // .then(data => loadData(data))\n      .catch(err => console.log(err));\n  }, [props.playerId]);\n\nreturn (\n  <div className=\"charts-container\">\n    <div className='chart-item'>\n      <DonutChart \n        playerId={props.playerId}\n        pitchDist={pitchDist}\n      />\n    </div>\n    <div className=\"chart-item\">\n      <SpiderChart playerId={props.playerId} />\n    </div>\n  </div>\n);\n}","import React, { useState } from 'react';\n\nimport InfoHeading from './InfoHeading';\nimport SearchBar from './SearchBar';\nimport ChartResults from './ChartResults';\n\nexport default function PitchingTool(props) {\n  const [playerName, setPlayerName] = useState(\"Nick Vincent\");\n  const [playerId, setPlayerId] = useState(\"nvincent\");\n  const [metrics, setMetrics] = useState(['ACES', 'Whiffs']);\n  const playerObject = { value: playerId, label: playerName };\n  const metricsObject = metrics.map(cv => ({ value: cv, label: cv }));\n\n  return (\n    <div>\n      <InfoHeading />\n      <SearchBar\n        setPlayerId={setPlayerId}\n        setPlayerName={setPlayerName}\n        player={playerObject}\n        setMetrics={setMetrics}\n        metricsObject={metricsObject}\n      />\n      <ChartResults\n        playerId={playerObject.value}\n      />\n    </div>\n  );\n}","import React from 'react';\n\nimport PitchingTool from './components/PitchingTool';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PitchingTool />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}